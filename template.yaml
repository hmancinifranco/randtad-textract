AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS SAM template for CV Processing with Textract and Web Hosting

Resources:
  # S3 Bucket para Web Hosting
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub cv-processor-web-${AWS::AccountId}-${AWS::Region}
      PublicAccessBlockConfiguration:
        BlockPublicAcesses: false
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET]
            AllowedOrigins: ['*']
            MaxAge: 3000

  # Bucket Policy para restringir acceso solo desde CloudFront
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontAccess
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub ${WebsiteBucket.Arn}/*
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${WebsiteDistribution}

  # CloudFront Distribution
  WebsiteDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Select [2, !Split ['/', !GetAtt WebsiteBucket.WebsiteURL]]
            Id: S3Origin
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
              HTTPPort: 80
              HTTPSPort: 443
              OriginSSLProtocols: [TLSv1.2]
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD]
          Compress: true
          DefaultTTL: 86400
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        HttpVersion: http2
        IPV6Enabled: true

  # Lambda Role (existente, actualizado)
  CVProcessLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CVProcessLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowTextractActions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - textract:AnalyzeDocument
                Resource: '*'
        - PolicyName: AllowLambdaActions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:GetLayerVersion
                Resource: '*'
        - PolicyName: AllowCloudwatchActions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # Lambda Function (existente)
  CVProcessFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CVProcessFunction
      Handler: app.lambda_handler
      Runtime: python3.12
      CodeUri: ./lambda
      Timeout: 30
      Role: !GetAtt CVProcessLambdaExecutionRole.Arn
      Layers:
        - arn:aws:lambda:us-west-2:770693421928:layer:Klayers-p312-Pillow:4
      Events:
        ApiGatewayPOSTcv:
          Type: Api
          Properties:
            Path: /process-cv
            Method: POST
            RestApiId: !Ref ApiGatewayCVProcess
      MemorySize: 3008

  # API Gateway (existente, actualizado con CORS)
  ApiGatewayCVProcess:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: ApiGatewayCVProcess
      StageName: prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /process-cv:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CVProcessFunction.Arn}/invocations
              responses:
                '200':
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: string
                    Access-Control-Allow-Methods:
                      schema:
                        type: string
                    Access-Control-Allow-Headers:
                      schema:
                        type: string
                  content: {}
            options:
              summary: CORS support
              description: Enable CORS by returning correct headers
              responses:
                '200':
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: string
                    Access-Control-Allow-Methods:
                      schema:
                        type: string
                    Access-Control-Allow-Headers:
                      schema:
                        type: string
                  content: {}
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        AllowMethods: "'POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
        MaxAge: 300
      BinaryMediaTypes:
        - application/pdf
        - application/octet-stream

Outputs:
  WebsiteURL:
    Description: URL for website hosted on S3
    Value: !GetAtt WebsiteBucket.WebsiteURL
    Export:
      Name: WebsiteURL

  CloudFrontURL:
    Description: URL for CloudFront distribution
    Value: !Sub https://${WebsiteDistribution.DomainName}
    Export:
      Name: CloudFrontURL

  ApiEndpoint:
    Description: API Gateway endpoint URL for CV Processing
    Value: !Sub https://${ApiGatewayCVProcess}.execute-api.${AWS::Region}.amazonaws.com/prod/process-cv
    Export:
      Name: CVProcessApiEndpoint

  BucketName:
    Description: Name of S3 bucket to hold website content
    Value: !Ref WebsiteBucket
    Export:
      Name: WebsiteBucketName